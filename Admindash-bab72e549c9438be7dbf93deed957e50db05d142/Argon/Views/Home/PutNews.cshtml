@{
    ViewData["ShowNavbar"] = false;
}

<link href="https://cdn.jsdelivr.net/npm/quill@2/dist/quill.snow.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/quill@2/dist/quill.bubble.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/quill@2/dist/quill.core.css" rel="stylesheet" />
<style>
    /* Editor ve Stil İyileştirmeleri */
    #editor {
        height: 300px;
        border: 1px solid #ccc;
        padding: 10px;
    }

    #toolbar {
        border: 1px solid #ccc;
        margin-bottom: 10px;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        color: #333;
        margin: 0;
        padding: 0;
    }

    header {
        background-color: #0078d7;
        color: white;
        padding: 10px 20px;
        text-align: center;
    }

    main {
        padding: 20px;
        margin: auto;
        background-color: white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        max-width: 800px;
    }

    h1 {
        text-align: center;
        color: #333;
    }

    form label {
        display: block;
        margin: 10px 0 5px;
    }

    form input,
    form textarea,
    form select,
    form button {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-sizing: border-box;
    }

    form textarea {
        resize: vertical;
        height: 150px;
    }

    form button {
        background-color: #0078d7;
        color: white;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }

        form button:hover {
            background-color: #005bb5;
        }

    .file-input {
        padding: 5px;
        background-color: #fafafa;
    }

        .file-input:hover {
            background-color: #f0f0f0;
        }

    .form-container input[type="file"] {
        display: block;
        margin-top: 10px;
    }

    /* Fotoğraf ve Video Önizlemeleri */
    .preview-container img {
        max-width: 100px;
        margin: 5px;
    }

    .preview-container a {
        display: inline-block;
        color: #0078d7;
        margin-top: 5px;
    }
</style>

<header>
    <h1>Haber Güncelle</h1>
</header>
<main class="col-lg-12">
    <form id="newsForm" method="post" enctype="multipart/form-data">
        <div class="form-container">
            <label for="newsTitle">Haber Başlığı:</label>
            <input type="text" id="newsTitle" name="NewsTitle" required />

            <!-- Quill Editor -->
            <label for="newsContent">Haber İçeriği:</label>
            <div id="toolbar">
                <select class="ql-font"></select>
                <select class="ql-size"></select>
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
                <select class="ql-color"></select>
                <select class="ql-background"></select>
                <button class="ql-link"></button>
                <button class="ql-image"></button>
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </div>
            <div id="editor"></div>

            <!-- Form Inputs -->
            <label for="newsLangId">Dil ID:</label>
            <select id="newsLangId" name="NewsLangId">
                <option value="">Dil Seçin</option>
            </select>

            <label for="newsCategoryId">Kategori ID:</label>
            <select id="newsCategoryId" name="NewsCategoryId">
                <option value="">Kategori Seçin</option>
            </select>

            <label for="newsOwnerId">Sahip ID:</label>
            <select id="newsOwnerId" name="NewsOwnerId">
                <option value="">Muxbir Seçin</option>
            </select>

            <label for="newsAdminId">Admin ID:</label>
            <select id="newsAdminId" name="NewsAdminId">
                <option value="">Admin Seçin</option>
            </select>

            <label for="newsRating">Haber Puanı:</label>
            <input type="number" id="newsRating" name="NewsRating" min="0" max="5" />

            <label for="newsDate">Haber Yayın Tarihi:</label>
            <input type="datetime-local" id="newsDate" name="NewsDate" /> 

            <label for="newsYoutubeLink">YouTube Link:</label>
            <input type="url" id="newsYoutubeLink" name="NewsYoutubeLink" />

            <label for="newsPhotos">Haber Fotoğrafları:</label>
            <input type="file" id="newsPhotos" name="NewsPhotos" multiple accept="image/*" />
            <img id="photoPreview" style="display:none; max-width: 100px; max-height: 100px;" alt="Fotoğraf Önizlemesi">


            <label for="newsVideos">Haber Videoları:</label>
            <input type="file" id="newsVideos" name="NewsVideos" multiple accept="video/*" />
            <div id="videoPreviewContainer"></div>

            <button type="submit">Güncelle</button>
        </div>
    </form>
</main>

<script src="https://cdn.jsdelivr.net/npm/quill@2/dist/quill.js"></script>

<script>
        document.addEventListener("DOMContentLoaded", () => {
        const tagContainer = document.getElementById("tag-container");
        const tagInput = document.getElementById("tag-input");
        const tags = [];

        // Etiket ekleme
        tagInput.addEventListener("keydown", (event) => {
            if (event.key === "Enter" && tagInput.value.trim() !== "") {
                event.preventDefault();
                const tagValue = tagInput.value.trim();
                tags.push(tagValue);
                console.log(tags);
                const tagElement = document.createElement("div");
                tagElement.classList.add("tag");
                tagElement.innerHTML = `${tagValue} <span>&times;</span>`;

                tagContainer.insertBefore(tagElement, tagInput);
                tagInput.value = "";

                // Etiket silme işlevi
                tagElement.querySelector("span").addEventListener("click", () => {
                    tagContainer.removeChild(tagElement);
                    const index = tags.indexOf(tagValue);
                    if (index !== -1) {
                        tags.splice(index, 1);
                    }
                });
            }
        });

        // Form submit sırasında etiketleri backend'e göndermek için
        document.querySelector("form").addEventListener("submit", function (e) {
            e.preventDefault(); // Formun normal gönderimini engelle

            const formData = new FormData(document.getElementById('newsForm'));
            const newsId = document.getElementById('newsId').value; // Dinamik olarak newsId alın

            // Form verilerini JSON formatına dönüştür
            const data = {
                NewsTitle: formData.get('NewsTitle'),
                NewsContetText: formData.get('NewsContent'), // İçerik (Quill editor'dan almanız gerekebilir)
                NewsCategoryId: parseInt(formData.get('NewsCategoryId')), // Kategori ID
                NewsLangId: parseInt(formData.get('NewsLangId')), // Dil ID
                NewsVisibility: formData.get('NewsVisibility') === 'on', // Görünürlük (checkbox)
                NewsDate: formData.get('NewsDate'),
                NewsTags: tags.join(','), // Etiketleri virgülle birleştir
                NewsRating: parseFloat(formData.get('NewsRating')), // Puan
                NewsYoutubeLink: formData.get('NewsYoutubeLink'), // YouTube Link
                NewsOwnerId: parseInt(formData.get('NewsOwnerId')), // Sahip ID
                NewsAdminId: parseInt(formData.get('NewsAdminId')), // Admin ID
                // Haber fotoğrafları ve videoları
                NewsPhotos: formData.getAll('NewsPhotos[]').map(file => file.name), // Fotoğraflar
                NewsVideos: formData.getAll('NewsVideos[]').map(file => file.name) // Videolar
            };

            // PUT isteğini gönderin
            fetch(`https://localhost:44314/api/news/id/${newsId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data) // JSON verisini gönder
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                // Başarılı güncelleme sonrası işlemler
            })
            .catch(error => console.error('Error:', error));
        });
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const langSelect = document.getElementById('newsLangId');
        const ownerSelect = document.getElementById('newsOwnerId');
        const adminSelect = document.getElementById('newsAdminId');
        const categorySelect = document.getElementById('newsCategoryId');

        // Admin verilerini API'den çek
        async function fetchAdmins() {
            try {
                const response = await fetch('https://localhost:44314/api/user/users');
                const admins = await response.json();
                adminSelect.innerHTML = '<option value="">Admin Seçin</option>';
                admins.forEach(admin => {
                    const option = document.createElement('option');
                    option.value = admin.userId;
                    option.textContent = admin.userName;
                    adminSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Admin verileri alınamadı:', error);
            }
        }

        // Owner verilerini API'den çek
        async function fetchOwners() {
            try {
                const response = await fetch('https://localhost:44314/api/owner');
                const owners = await response.json();
                ownerSelect.innerHTML = '<option value="">Muhabir Seçin</option>';
                owners.forEach(owner => {
                    const option = document.createElement('option');
                    option.value = owner.ownerId;
                    option.textContent = owner.ownerName;
                    ownerSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Owner verileri alınamadı:', error);
            }
        }

        // Dil verilerini API'den çek
        async function fetchLanguages() {
            try {
                const response = await fetch('https://localhost:44314/api/languages/all');
                const languages = await response.json();
                langSelect.innerHTML = '<option value="">Dil Seçin</option>';
                languages.forEach(language => {
                    const option = document.createElement('option');
                    option.value = language.languageId;
                    option.textContent = language.languageName;
                    langSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Dil verileri alınamadı:', error);
            }
        }

        // Kategorileri API'den çek ve dil ID'sine göre filtrele
        async function fetchCategoriesByLanguage(langId) {
            try {
                const response = await fetch(`https://localhost:44314/api/category/language/${langId}`);
                const categories = await response.json();
                categorySelect.innerHTML = '<option value="">Kategori Seçin</option>';
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.categoryId;
                    option.textContent = category.categoryName;
                    categorySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Kategori verileri alınamadı:', error);
            }
        }

        // Dil seçildiğinde kategorileri getir
        langSelect.addEventListener('change', function () {
            const selectedLangId = langSelect.value;
            if (selectedLangId) {
                fetchCategoriesByLanguage(selectedLangId);
            } else {
                categorySelect.innerHTML = '<option value="">Kategori Seçin</option>';
            }
        });

        // Sayfa yüklendiğinde dil ve owner verilerini çek
        fetchLanguages();
        fetchOwners();
        fetchAdmins();
    });
</script>
<script>
        document.addEventListener('DOMContentLoaded', () => {
        const pathParts = window.location.pathname.split('/');
        const newsId = pathParts[pathParts.length - 1];  // Sayfa URL'sinden haber ID'sini al
        const apiUrl = `https://localhost:44314/api/news/id/${newsId}`;  // API URL'sini oluştur

        const quill = new Quill("#editor", {
            theme: "snow",
            modules: {
                toolbar: "#toolbar",
            },
        });

        // API'den veri çekme
        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                // Title ve Content alanları zaten doğru şekilde yüklendi.
                document.getElementById("newsTitle").value = data.newsTitle || '';
                document.getElementById("newsRating").value = data.newsRating || '';
                document.getElementById("newsYoutubeLink").value = data.newsYoutubeLink || '';
                quill.root.innerHTML = data.newsContetText || '';

                // Select element'lerine veri aktarımı
                if (data.newsLangId) {
                    document.getElementById("newsLangId").value = data.newsLangId;
                }
                if (data.newsCategoryId) {
                    document.getElementById("newsCategoryId").value = data.newsCategoryId;
                }

                // Fotoğraf ve video önizlemeleri için
                const photosContainer = document.getElementById("photosPreview");
                if (data.newsPhotos) {
                    data.newsPhotos.forEach(photo => {
                        const img = document.createElement("img");
                        img.src = photo.photoUrl;
                        photosContainer.appendChild(img);
                    });
                }

                const videosContainer = document.getElementById("videosPreview");
                if (data.newsVideos) {
                    data.newsVideos.forEach(video => {
                        const link = document.createElement("a");
                        link.href = video.videoUrl;
                        link.target = "_blank";
                        link.innerText = "Video";
                        videosContainer.appendChild(link);
                    });
                }
            })
            .catch(error => console.error('API hatası:', error));

        document.getElementById("newsForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
            const quillContent = quill.root.innerHTML;
            formData.append("newsContetText", quillContent);

            // FormData'dan updateNewsDto'yu oluştur
            const updateNewsDto = {
                NewsTitle: formData.get('newsTitle'),
                NewsContetText: quillContent,
                NewsDate: formData.get('newsDate'),
                NewsCategoryId: formData.get('newsCategoryId'),
                NewsLangId: formData.get('newsLangId'),
                NewsVisibility: formData.get('newsVisibility') === 'on',  // Eğer checkbox kullanıyorsanız
                NewsTags: formData.get('newsTags'),
                NewsRating: parseFloat(formData.get('newsRating')),
                NewsYoutubeLink: formData.get('newsYoutubeLink'),
                NewsOwnerId: formData.get('newsOwnerId'),
                NewsAdminId: formData.get('newsAdminId'),
                NewsPhotos: [],  // Fotoğraf verilerini ekleyebilirsiniz
                NewsVideos: []  // Video verilerini ekleyebilirsiniz
            };

            // Fotoğrafları ekleme (isteğe bağlı)
            const photoFiles = formData.getAll('newsPhotos');  // Form verilerinden fotoğrafları alın
            updateNewsDto.NewsPhotos = photoFiles.map(file => ({ PhotoUrl: file.name }));  // Fotoğraf URL'lerini ekle

            // Videoları ekleme (isteğe bağlı)
            const videoLinks = formData.getAll('newsVideos');  // Form verilerinden video URL'lerini alın
            updateNewsDto.NewsVideos = videoLinks.map(link => ({ VideoUrl: link }));  // Video URL'lerini ekle

            // PUT isteği ile veri gönderme
            fetch(`https://localhost:44314/api/news/id/${newsId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateNewsDto),  // JSON formatında gönder
            })
            .then(response => {
                return response.text();  // Yanıtı metin olarak al
            })
            .then(data => {
                console.log("Sunucu yanıtı:", data);  // Yanıtı yazdır
                // Eğer burada JSON dönüyorsa response.json() ile de işlenebilir
                // console.log('Haber başarıyla güncellendi', data);
            })
            .catch(error => {
                console.error('Hata:', error);
            });
        });
    });

</script>
<script>
    // Fotoğraf önizlemesi
    document.getElementById('newsPhotos').addEventListener('change', function(event) {
        const photoPreview = document.getElementById('photoPreview');
        const files = event.target.files;
        photoPreview.innerHTML = '';
        for (let i = 0; i < files.length; i++) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(files[i]);
            img.classList.add('thumbnail');
            photoPreview.appendChild(img);
        }
    });

    // Video önizlemesi
    document.getElementById('newsVideos').addEventListener('change', function(event) {
        const videoPreview = document.getElementById('videoPreview');
        const files = event.target.files;
        videoPreview.innerHTML = '';
        for (let i = 0; i < files.length; i++) {
            const videoLink = document.createElement('a');
            videoLink.href = URL.createObjectURL(files[i]);
            videoLink.innerText = 'Video ' + (i + 1);
            videoLink.target = '_blank';
            videoPreview.appendChild(videoLink);
        }
    });
</script>
